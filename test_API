from fastapi.testclient import TestClient
from sqlalchemy import create_engine, StaticPool
from sqlalchemy.orm import sessionmaker
from WeerWijzerAPI import app, Base, get_db
from datetime import datetime, timedelta

# TestClient opzetten
client = TestClient(app)

# In-memory database opzetten voor het testen
DATABASE_URL = "sqlite:///:memory:"
engine = create_engine(
    DATABASE_URL,
    connect_args={
        "check_same_thread": False,
    },
    poolclass=StaticPool,
)
TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


# De database verbinding van WeerWijzerAPI overschrijven met de test database
def override_get_db():
    database = TestingSessionLocal()
    yield database
    database.close()


app.dependency_overrides[get_db] = override_get_db

datumNuTesting = datetime.now()


def test_create_meting():

    response = client.post(
        "/metingen/", json={"locatie": "Apeldoorn", "datetime": datumNuTesting}
    )
    assert response.status_code == 200, response.text
    data = response.json()
    assert data["locatie"] == "Apeldoorn"
    assert data["datetime"] == datumNuTesting
    assert "id" in data


# READ_METING KAN GEEN GET METINGUREN ZIJN. RESPONSE MOET AANGEPAST WORDEN, ER MOETEN TWEE CREATES GEMAAKT WORDEN OM EEN TE KUNNEN TESTEN
def test_read_metingen_via_metinguren():
    locatie = "Amersfoort"
    response = client.post(
        "/metingen/", json={"locatie": locatie, "datetime": datumNuTesting}
    )
    assert response.status_code == 200, response.text
    data = response.json()
    item_id = data["id"]

    response = client.get(f"/metinguren/{locatie}")
    assert response.status_code == 200, response.text
    data = response.json()
    assert data["locatie"] == locatie
    assert data["datetime"] == datumNuTesting
    assert data["id"] == item_id


# DE RETURN VAN DELETE METINGEN MOET AANGEPAST WORDEN. EN DE COUNT ERVAN MOET GETELD WORDEN, OM TE KIJKEN OF DIT MATCHT
def test_delete_metingen():
    item_id = 1
    locatie = "Apeldoorn"
    response = client.delete(f"/metingen/{locatie}")
    assert response.status_code == 200, response.text
    data = response.json()
    assert data["id"] == item_id
    # Try to get the deleted item
    response = client.get(f"/metingen/{locatie}")
    assert response.status_code == 404, response.text


def setup() -> None:
    # Tabellen in de test database aanmaken
    Base.metadata.create_all(bind=engine)


def teardown() -> None:
    # Tabellen in de database verwijderen
    Base.metadata.drop_all(bind=engine)
