name: CICD Pipeline
on:
  push:
    branches:
      - feature/terraform
  # pull_request:
  #   branches:
  #     - master
env:
  DOCKER_VERSION: 1.0.19


jobs:
  setup-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
#      - name: Run linting
#        run: |
#          flake8 ./metingen.py
      # - name: Run a test with coverage
      #   run: |
      #     pytest --cov

  build:
    needs: setup-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCKER_TOKEN }}
      - name: Cancel garbage tasks
        run: |
          cd .github/workflows
          chmod +x stop.sh
          ./stop.sh
      - name: Build Docker container
        run: |
            docker build   -t weerwijzer-app:$DOCKER_VERSION .


      - name: push the image to digital ocean container
        run: |
            echo ${{ secrets.DOCKER_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin registry.digitalocean.com
            docker tag weerwijzer-app:$DOCKER_VERSION registry.digitalocean.com/container-weerwijzer/weerwijzer-app:$DOCKER_VERSION
            docker image push registry.digitalocean.com/container-weerwijzer/weerwijzer-app:$DOCKER_VERSION
#      - name: Run garbage collection
#        run: |
#          doctl registry garbage-collection start --include-untagged-manifests --force
      - name: Check for active garbage collection tasks
        run: |
          cd .github/workflows
          chmod +x bash.sh
          ./bash.sh

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
           terraform_version: 1.0.0
      # - name: Set Terraform DigitalOcean token
      #   run: |
      #     echo 'variable "do_token" {' > variables.tf
      #     echo '  type    = string' >> variables.tf
      #     echo '  default = "${{secrets.DOCKER_TOKEN}}"' >> variables.tf
      #     echo '}' >> variables.tf
     # terraform apply -var="github_secrets={DB_HOST=your_secret_value}"


      - name: Terraform Init
        run: |
          cd iac
          terraform init \
            -var="space_access_key=${{secrets.SPACE_ACCESS_KEY}}" \
            -var="space_secret_key=${{secrets.SPACE_SECRET_KEY}}"

      - name: Terraform Plan
        run: |
           cd iac
           terraform plan \
            -var="API_KEY=${{secrets.API_KEY}}" \
            -var="app_image_tag=$DOCKER_VERSION" \
            -var="db_password=${{secrets.DB_PASSWORD}}" \
            -var="do_token=${{secrets.DOCKER_TOKEN}}" \
            -var="space_access_key=${{secrets.SPACE_ACCESS_KEY}}" \
            -var="space_secret_key=${{secrets.SPACE_SECRET_KEY}}"

      - name: Terraform Apply
        run: |
           cd iac
           terraform apply -auto-approve \
            -var="API_KEY=${{secrets.API_KEY}}" \
            -var="app_image_tag=$DOCKER_VERSION" \
            -var="db_password=${{secrets.DB_PASSWORD}}" \
            -var="do_token=${{secrets.DOCKER_TOKEN}}" \
            -var="space_access_key=${{secrets.SPACE_ACCESS_KEY}}" \
            -var="space_secret_key=${{secrets.SPACE_SECRET_KEY}}"
