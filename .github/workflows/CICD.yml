name: CICD Pipeline
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
env:
  DOCKER_VERSION: 2.0

  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
        - name: Checkout Repository
          uses: actions/checkout@v2
        - name: Install doctl
          uses: digitalocean/action-doctl@v2
          with:
            token: ${{ secrets.DOCKER_TOKEN }}

        - name: Set up Terraform
          uses: hashicorp/setup-terraform@v1
          with:
            terraform_version: 1.0.0

        - name: Terraform voor container en database
          run: |
            cd iac-container
            terraform init \
              -backend-config="access_key=${{secrets.SPACE_ACCESS_KEY}}" \
              -backend-config="secret_key=${{secrets.SPACE_SECRET_KEY}}" 
            terraform plan \
              -var="do_token=${{secrets.DOCKER_TOKEN}}" \
              -var="github_token=${{secrets.GH_TOKEN}}" 
            terraform apply -auto-approve \
              -var="do_token=${{secrets.DOCKER_TOKEN}}" \
              -var="github_token=${{secrets.GH_TOKEN}}"  

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
        - name: Checkout Repository
          uses: actions/checkout@v2
        - name: Set up Python
          uses: actions/setup-python@v2
          with:
            python-version: '3.x'
        - name: install requirements
          run: |
              python -m pip install --upgrade pip
              pip install -r requirements.txt
        - name: Run the DB test
          env:
            DB_HOST: ${{ secrets.DB_HOST }}
            DB_NAME: ${{ secrets.DB_NAME }}
            DB_PORT: ${{ secrets.DB_PORT }}
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            API_KEY: ${{ secrets.API_KEY }}
          run: |
              pytest --cov=test_DB test_DB.py
        - name: Run the API test
          env:
            DB_HOST: ${{ secrets.DB_HOST }}
            DB_NAME: ${{ secrets.DB_NAME }}
            DB_PORT: ${{ secrets.DB_PORT }}
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            API_KEY: ${{ secrets.API_KEY }}
          run: |
              pytest --cov=test_API test_API.py
        - name: Run de weerWijzer test
          env:
            DB_HOST: ${{ secrets.DB_HOST }}
            DB_NAME: ${{ secrets.DB_NAME }}
            DB_PORT: ${{ secrets.DB_PORT }}
            DB_USER: ${{ secrets.DB_USER }}
            DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
            API_KEY: ${{ secrets.API_KEY }}
          run: |
              pytest --cov=test_runWeerWijzer test_runWeerWijzer.py

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Cancel garbage tasks
        run: |
          cd .github/workflows
          chmod +x stop.sh
          ./stop.sh

      - name: Build Docker container
        run: |
            docker build   -t weerwijzer-app:$DOCKER_VERSION .

      - name: push the image to digital ocean container
        run: |
            echo ${{ secrets.DOCKER_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin registry.digitalocean.com
            docker tag weerwijzer-app:$DOCKER_VERSION registry.digitalocean.com/container-weerwijzer/weerwijzer-app:$DOCKER_VERSION
            docker image push registry.digitalocean.com/container-weerwijzer/weerwijzer-app:$DOCKER_VERSION

      - name: Remove images older than the last n versions
        run: |
              cd .github/workflows
              chmod +x bash.sh
              ./bash.sh

      - name: Terraform Init voor alle andere componenten
        run: |
          cd iac
          terraform init \
            -backend-config="access_key=${{secrets.SPACE_ACCESS_KEY}}" \
            -backend-config="secret_key=${{secrets.SPACE_SECRET_KEY}}"

      - name: Terraform Plan voor alle andere componenten
        run: |
           cd iac
           terraform plan \
            -var="API_KEY=${{secrets.API_KEY}}" \
            -var="app_image_tag=$DOCKER_VERSION" \
            -var="db_password=${{secrets.DB_PASSWORD }}" \
            -var="db_user=${{secrets.DB_USER }}" \
            -var="db_host=${{secrets.DB_HOST }}" \
            -var="db_name=${{secrets.DB_NAME }}" \
            -var="db_port=${{secrets.DB_PORT }}" \
            -var="do_token=${{secrets.DOCKER_TOKEN}}" \

      - name: Terraform Apply voor alle andere componenten
        run: |
           cd iac
           terraform apply -auto-approve \
            -var="API_KEY=${{secrets.API_KEY}}" \
            -var="app_image_tag=$DOCKER_VERSION" \
            -var="db_password=${{secrets.DB_PASSWORD }}" \
            -var="db_user=${{secrets.DB_USER }}" \
            -var="db_host=${{secrets.DB_HOST }}" \
            -var="db_name=${{secrets.DB_NAME }}" \
            -var="db_port=${{secrets.DB_PORT }}" \
            -var="do_token=${{secrets.DOCKER_TOKEN}}" \
            
